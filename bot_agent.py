import json
import config
from openai import AsyncOpenAI
import plant_utils
import telegrambot
from chat_context import ChatContext, DialogState, PERSONA_DESCRIPTION, ADDRESS_INFO, RESPONSE_FORMAT_INSTRUCTIONS
from agents import Agent, Runner, function_tool, ModelSettings, RunContextWrapper
import logging
import re
from datetime import datetime

logger = logging.getLogger(__name__)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
CATEGORY_REPLIES = {
    "live_photo": "–°–µ–π—á–∞—Å —è —Å–ø—Ä–æ—à—É —É –∫–æ–ª–ª–µ–≥–∏, —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª –¥–ª—è –≤–∞—Å —Å–≤–µ–∂–µ–Ω—å–∫–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è üì∏ –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ö–æ—Ä–æ—à–æ?",
    "multiple_plants": "–î–ª—è –≤–∞—à–µ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∑–∞–∫–∞–∑–∞ —è —É–∂–µ –∑–æ–≤—É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ü§ó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!",
    "order_question": "–°–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º üì¶",
    "call_request": "–ü–æ–Ω—è–ª, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ—à—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû",
    "reclamation": "–Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è–º üôè –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
    "ask_human": "–ö–æ–Ω–µ—á–Ω–æ, —è –ø–æ–∑–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ª–∏—á–Ω–æ ü§ù –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç—å-—á—É—Ç—å!",
    #"delivery": "–°–µ–π—á–∞—Å —Å–≤—è–∂—É—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ üöö –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
    "office_plant": "–ó–æ–≤—É –Ω–∞—à–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—é –æ—Ñ–∏—Å–æ–≤ üåø –û–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
}

# –ü—Ä–µ—Ñ–∏–∫—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
DETAILS_PREFIX = {
    "live_photo": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∂–∏–≤–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è",
    "multiple_plants": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∑–∞–∫–∞–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π",
    "order_question": "–í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–∫–∞–∑—É",
    "call_request": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å",
    "reclamation": "–†–µ–∫–ª–∞–º–∞—Ü–∏—è",
    "ask_human": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
    #"delivery": "–í–æ–ø—Ä–æ—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ",
    "office_plant": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ñ–∏—Å–∞",
}

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ—Ä—à–∫–æ–≤
PLANT_POT_SIZE_MAPPING = {
    # –î–∏–∞–º–µ—Ç—Ä –≥–æ—Ä—à–∫–∞ —É —Ä–∞—Å—Ç–µ–Ω–∏—è -> –¥–∏–∞–º–µ—Ç—Ä –∫–∞—à–ø–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–±–∏—Ä–∞–µ–º
    9: (10, 12),
    10: (10, 12), 
    11: (12, 15),
    12: (12, 15),
    13: (15, 18),
    14: (15, 18),
    15: (15, 18),
    16: (19, 21),
    17: (19, 21),
    18: (19, 21),
    19: (21, 25),
    20: (21, 25),
    21: (21, 25),
    22: (21, 25),
    23: (26, 29),
    24: (28, 30),
    25: (30, 35),
    26: (30, 35),
    27: (30, 35),
    28: (30, 35),
    29: (35, 40),
    30: (35, 40),
    31: (35, 40),
    32: (35, 40),
    33: (40, 45),
    34: (40, 45),
    35: (40, 45),
    36: (43, 50),
    37: (50, 59),
    38: (50, 59),
    39: (50, 59),
    40: (50, 59),
    41: (50, 59),
    42: (50, 59),
    43: (50, 59),
    44: (50, 59),
    45: (50, 59),
    46: (60, 70),
    47: (60, 70),
    48: (60, 70),
    49: (60, 70),
    50: (60, 70),
    51: (60, 70),
    52: (60, 70),
    53: (60, 70)
}

def extract_plant_diameter(plant_name: str) -> int | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∏–∞–º–µ—Ç—Ä –≥–æ—Ä—à–∫–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "12/45 —Å–º", "d17 —Å–º", "21/110 —Å–º"
    patterns = [
        r'(\d+)/\d+\s*—Å–º',  # "12/45 —Å–º" - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
        r'd(\d+)\s*—Å–º',     # "d17 —Å–º" - –±–µ—Ä–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ d
        r'(\d+)\s*—Å–º',      # "21 —Å–º" - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ —Å —Å–º
    ]
    
    for pattern in patterns:
        match = re.search(pattern, plant_name)
        if match:
            diameter = int(match.group(1))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–º–µ—Ç—Ä –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (5-60 —Å–º)
            if 5 <= diameter <= 60:
                return diameter
    
    return None

def generate_pot_link(plant_diameter: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥–æ—Ä—à–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    if plant_diameter not in PLANT_POT_SIZE_MAPPING:
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–∑–º–µ—Ä
        closest_diameter = min(PLANT_POT_SIZE_MAPPING.keys(), 
                             key=lambda x: abs(x - plant_diameter))
        pot_range = PLANT_POT_SIZE_MAPPING[closest_diameter]
    else:
        pot_range = PLANT_POT_SIZE_MAPPING[plant_diameter]
    
    min_diameter, max_diameter = pot_range
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    base_url = "https://tropichouse.ru/catalog/gorshki_i_kashpo/filter"
    link = f"{base_url}/diameter-from-{min_diameter}-to-{max_diameter}/apply/"
    
    return link

async def check_and_send_pot_suggestion(chat_id: str, selected_plants: list):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –≥–æ—Ä—à–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å –∫–∞—à–ø–æ"""
    from main import send_message
    
    tech_pot_plants = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
    for plant in selected_plants:
        pot_info = plant.get("–ö–∞—à–ø–æ/–ì–æ—Ä—à–æ–∫", "")
        if "–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –≥–æ—Ä—à–∫–µ" in pot_info:
            tech_pot_plants.append(plant)
    
    if not tech_pot_plants:
        return  # –ù–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä—à–∫–∞—Ö
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –≥–æ—Ä—à–∫–µ
    for plant in tech_pot_plants:
        plant_name = plant.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
        diameter = extract_plant_diameter(plant_name)
        
        if diameter:
            pot_link = generate_pot_link(diameter)
            message = f"""ü™¥ –ö—Å—Ç–∞—Ç–∏! –í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ "{plant_name}" –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –≥–æ—Ä—à–∫–µ. 

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∫—Ä–∞—Å–∏–≤—ã–º –∫–∞—à–ø–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞:
{pot_link}

–≠—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —É–∫—Ä–∞—Å–∏—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä, –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ä–∞—Å—Ç–µ–Ω–∏—é –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è! üåø‚ú®"""
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É
            message = f"""ü™¥ –ö—Å—Ç–∞—Ç–∏! –í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ "{plant_name}" –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –≥–æ—Ä—à–∫–µ. 

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∫—Ä–∞—Å–∏–≤—ã–º –∫–∞—à–ø–æ:
https://tropichouse.ru/catalog/gorshki_i_kashpo/

–≠—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —É–∫—Ä–∞—Å–∏—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä, –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ä–∞—Å—Ç–µ–Ω–∏—é –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è! üåø‚ú®"""
        
        await send_message(chat_id, message)

async def classify_intent(ctx: RunContextWrapper[ChatContext] | ChatContext, text: str) -> str:
    """
        Classifies a client message into a predefined intent.
        """
    review_request_text = (
        "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω üè°\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ TropicHouse! üåø\n\n"
        "–í–∞—à –≤—ã–±–æ—Ä ‚Äî –ª—É—á—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ–º —Å–µ—Ä–≤–∏—Å –∏ —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—èüå¥\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ:\n"
        "5 ‚Äî üòç –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ\n"
        "3 ‚Äî üòê –µ—Å—Ç—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å\n"
        "1 ‚Äî üòû –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤
    if text.strip() == review_request_text.strip():
        logger.info("Ignoring fixed review request message from another bot.")
        return "review_ignore"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5)
    last_message = context.get_last_message()
    if last_message and last_message.get('text', '').strip() == review_request_text.strip():
        if text.strip() in ['1', '3', '5', '1 - 3', '5 - –æ—Ç–ª–∏—á–Ω–æ', '5 ‚Äî –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ', '3 ‚Äî –µ—Å—Ç—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å',
                            '1 ‚Äî –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã']:
            logger.info("Ignoring client's response to a review request.")
            return "review_ignore"

    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–ª—É—á–∞–µ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    system_prompt = """
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—à—å –∏—Ö –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

## –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π):
- live_photo: –∑–∞–ø—Ä–æ—Å –∂–∏–≤–æ–≥–æ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
- multiple_plants: –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
- order_question: –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–Ω–µ–µ —Å–¥–µ–ª–∞–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É (—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞, –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞)
- call_request: –ø—Ä–æ—Å—å–±–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å, —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
- pot_request: –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ –∫–∞—à–ø–æ –∏ –≥–æ—Ä—à–∫–∏ (–±–µ–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π)
- reclamation: —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ —Å–ª—É—á–∞–∏)
- ask_human: –ø—Ä–æ—Å—å–±–∞ –ø–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞/—á–µ–ª–æ–≤–µ–∫–∞
- delivery: –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ
- office_plant: –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –¥–ª—è –æ—Ñ–∏—Å–∞, –æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –æ—Ñ–∏—Å–∞, b2b –∑–∞–∫–∞–∑—ã
- none: –≤—Å–µ –ø—Ä–æ—á–∏–µ –∑–∞–ø—Ä–æ—Å—ã

## –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è:
–û–°–û–ë–ï–ù–ù–û –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å:
- —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Å–∞
- –æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –æ—Ñ–∏—Å–∞
- b2b —É—Å–ª—É–≥–∏
- –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
- –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º (–∫–æ–≥–¥–∞ –∏ —á—Ç–æ –ø—Ä–∏–≤–µ–∑—É—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –≥–¥–µ –º–æ–π –∑–∞–∫–∞–∑)
- –ø—Ä–æ—Å—å–±—ã –ø–æ–∑–≤–æ–Ω–∏—Ç—å, —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ, –Ω—É–∂–µ–Ω –∑–≤–æ–Ω–æ–∫)
- –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ –∫–∞—à–ø–æ –∏ –≥–æ—Ä—à–∫–∏ (–ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞—à–ø–æ, –Ω—É–∂–µ–Ω –≥–æ—Ä—à–æ–∫, –∫–∞–∫–∏–µ –∫–∞—à–ø–æ –µ—Å—Ç—å)

## –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –û–î–ù–û –°–õ–û–í–û –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã—à–µ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
    """
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": text},
    ]
    response = await client.chat.completions.create(model="gpt-4.1-mini", messages=messages)
    category = response.choices[0].message.content.strip().lower()
    if category not in CATEGORY_REPLIES:
        return "none"
    return category

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞

def _make_instructions(ctx: RunContextWrapper[ChatContext] | ChatContext, agent: Agent[ChatContext]) -> str:
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instructions = f"{PERSONA_DESCRIPTION}\n{ADDRESS_INFO}\n{RESPONSE_FORMAT_INSTRUCTIONS}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º state
    if isinstance(ctx, RunContextWrapper):
        state = ctx.context.state
        cart = ctx.context.cart
    else:
        state = ctx.state
        cart = ctx.cart
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
    if cart:
        cart_info = f"\n## –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞:\n{ctx.context.get_cart_summary() if isinstance(ctx, RunContextWrapper) else ctx.get_cart_summary()}"
        instructions += cart_info
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if state == DialogState.START:
        instructions += """
## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û –≠–¢–û–¢ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! 
–ú–µ–Ω—è –∑–æ–≤—É—Ç –û–ª–∏–≤–∏—è üçÄ –Ø –º–µ–Ω–µ–¥–∂–µ—Ä Tropic House, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. 
–ú–µ–Ω—è –æ–±—É—á–∏–ª–∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–¥ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏ —è –º–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –í–∞—Å –ø–æ –Ω–∞–ª–∏—á–∏—é üå≥üå¥üåµ
–ï—Å–ª–∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∏—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞—à –¥–∏–∞–ª–æ–≥ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞üå∑

–ù–ï –ò–ó–ú–ï–ù–Ø–ô –≠–¢–û–¢ –¢–ï–ö–°–¢. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å.
"""
    elif state == DialogState.ASK_SIZE:
        instructions += "\n## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞\n–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≤—ã—è—Å–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è (–Ω–∞–ø–æ–ª—å–Ω–æ–µ >90—Å–º –∏–ª–∏ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–µ <90—Å–º)."
    elif state == DialogState.ASK_LOCATION:
        instructions += "\n## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è\n–£—Ç–æ—á–Ω–∏, –∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ (–¥–æ–º, –æ—Ñ–∏—Å, –ø–æ–¥–∞—Ä–æ–∫)."
    elif state == DialogState.PLANT_SEARCH:
        instructions += """
## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ–¥–±–æ—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π
–ò—â–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –í–°–ï–ì–î–ê –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ add_to_cart.
–°–ø—Ä–∞—à–∏–≤–∞–π: "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É?" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?"
"""
    elif state == DialogState.OUT_OF_STOCK:
        instructions += "\n## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏\n–ú—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —á–µ—Ä–µ–∑ 3-10 –¥–Ω–µ–π –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∫–∞–∫ –ø—Ä–µ–¥–∑–∞–∫–∞–∑."
    elif state == DialogState.ORDERING:
        instructions += "\n## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n–ü–æ–∑–æ–≤–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    elif state == DialogState.CART_MANAGEMENT:
        instructions += """
## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:
- add_to_cart: –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
- show_cart: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
- remove_from_cart: —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
- checkout_cart: –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–π: "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑?"
"""
    elif state == DialogState.UPSELL:
        instructions += "\n## –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n–ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é suggest_accessories."
    
    return instructions

@function_tool
async def search(ctx: RunContextWrapper[ChatContext], query: str) -> str:
    """–ò—â–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    results_with_score = await plant_utils.vector_search_with_score(query, top_k=50, openai_client=client)
    
    processed_results = []
    for plant_data, score in results_with_score:
        item = plant_data.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
        item["relevance_score"] = score
        processed_results.append(item)
        
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    name_search_results = plant_utils.search_plants_by_name(query)
    for plant_data_from_name_search in name_search_results:
        name = plant_data_from_name_search.get("–ù–∞–∑–≤–∞–Ω–∏–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ "–ù–∞–∑–≤–∞–Ω–∏–µ" —É–∂–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        is_duplicate = any(
            existing_item.get("–ù–∞–∑–≤–∞–Ω–∏–µ") == name 
            for existing_item in processed_results
        )
        
        if not is_duplicate:
            item = plant_data_from_name_search.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
            item["relevance_score"] = 1.0  # –ü—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª
            processed_results.append(item)
            
    return json.dumps({"results": processed_results, "total_count": len(processed_results), "query": query}, ensure_ascii=False)

@function_tool
async def order(ctx: RunContextWrapper[ChatContext], plant: str, quantity: int, customer_info: str | None = None) -> str:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –∑–∞–∫–∞–∑–µ."""
    details = f"–ó–∞–∫–∞–∑: {plant}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    if customer_info:
        details += f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {customer_info}"
    result = await telegrambot.notify_seller(details, is_preorder=False, context=ctx.context)
    
    # –ò—â–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≥–æ—Ä—à–∫–∞
    plant_data = plant_utils.search_plants_by_name(plant)
    if plant_data:
        await check_and_send_pot_suggestion(ctx.context.chat_id, plant_data)
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    ctx.context.change_state(DialogState.UPSELL)
    
    return json.dumps(result, ensure_ascii=False)

@function_tool
async def preorder(ctx: RunContextWrapper[ChatContext], plant: str, quantity: int, customer_info: str | None = None) -> str:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ."""
    details = f"–ü–†–ï–î–ó–ê–ö–ê–ó: {plant}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    if customer_info:
        details += f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {customer_info}"
    result = await telegrambot.notify_seller(details, is_preorder=True, context=ctx.context)
    
    # –ò—â–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≥–æ—Ä—à–∫–∞
    plant_data = plant_utils.search_plants_by_name(plant)
    if plant_data:
        await check_and_send_pot_suggestion(ctx.context.chat_id, plant_data)
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    ctx.context.change_state(DialogState.UPSELL)
    
    return json.dumps(result, ensure_ascii=False)

@function_tool
async def suggest_accessories(ctx: RunContextWrapper[ChatContext]) -> str:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è."""
    accessories = {
        "–õ–µ–π–∫–∏ –∏ –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏": "https://tropichouse.ru/catalog/aksessuary/leyki_i_opryskivateli/",
        "–£–¥–æ–±—Ä–µ–Ω–∏—è": "https://tropichouse.ru/catalog/udobreniya/udobreniya_1/", 
        "–§–∏—Ç–æ–ª–∞–º–ø—ã": "https://tropichouse.ru/catalog/aksessuary/fitolampy/",
        "–ü—Ä–∏–±–æ—Ä—ã –¥–ª—è —É—Ö–æ–¥–∞": "https://tropichouse.ru/catalog/aksessuary/pribory_dlya_rasteniy/"
    }
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UPSELL
    ctx.context.change_state(DialogState.UPSELL)
    
    return json.dumps({"accessories": accessories}, ensure_ascii=False)

@function_tool
async def add_to_cart(ctx: RunContextWrapper[ChatContext], plant: str, quantity: int, order_type: str = "order") -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    # –ò—â–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    plant_data = plant_utils.search_plants_by_name(plant)
    
    if not plant_data:
        return "–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    selected_plant = plant_data[0] if isinstance(plant_data, list) else plant_data
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    ctx.context.add_to_cart(selected_plant, quantity, order_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    ctx.context.change_state(DialogState.CART_MANAGEMENT)
    
    plant_name = selected_plant.get("–ù–∞–∑–≤–∞–Ω–∏–µ", plant)
    return f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ '{plant_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})"

@function_tool 
async def show_cart(ctx: RunContextWrapper[ChatContext]) -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    cart_summary = ctx.context.get_cart_summary()
    
    if ctx.context.cart:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
        ctx.context.change_state(DialogState.CART_MANAGEMENT)
        return cart_summary + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, —É–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
    else:
        return cart_summary

@function_tool
async def checkout_cart(ctx: RunContextWrapper[ChatContext], customer_info: str | None = None) -> str:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    if not ctx.context.cart:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    orders = []
    preorders = []
    
    for item in ctx.context.cart:
        plant_name = item["plant"].get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        quantity = item["quantity"]
        
        if item["type"] == "preorder":
            preorders.append(f"{plant_name} - {quantity} —à—Ç.")
        else:
            orders.append(f"{plant_name} - {quantity} —à—Ç.")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    results = []
    
    if orders:
        order_details = "–ó–ê–ö–ê–ó:\n" + "\n".join(orders)
        if customer_info:
            order_details += f"\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {customer_info}"
        
        result = await telegrambot.notify_seller(order_details, is_preorder=False, context=ctx.context)
        results.append(result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä—à–∫–∞—Ö
        cart_plants = [item["plant"] for item in ctx.context.cart if item["type"] == "order"]
        if cart_plants:
            await check_and_send_pot_suggestion(ctx.context.chat_id, cart_plants)
    
    if preorders:
        preorder_details = "–ü–†–ï–î–ó–ê–ö–ê–ó:\n" + "\n".join(preorders)
        if customer_info:
            preorder_details += f"\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {customer_info}"
        
        result = await telegrambot.notify_seller(preorder_details, is_preorder=True, context=ctx.context)
        results.append(result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä—à–∫–∞—Ö
        cart_plants = [item["plant"] for item in ctx.context.cart if item["type"] == "preorder"]
        if cart_plants:
            await check_and_send_pot_suggestion(ctx.context.chat_id, cart_plants)
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    ctx.context.clear_cart()
    ctx.context.change_state(DialogState.UPSELL)
    
    return json.dumps({"success": True, "message": "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω"}, ensure_ascii=False)

@function_tool
async def remove_from_cart(ctx: RunContextWrapper[ChatContext], plant_name: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    plant_found = False
    for item in ctx.context.cart:
        if plant_name.lower() in item["plant"].get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").lower():
            plant_found = True
            break
    
    if not plant_found:
        return f"–†–∞—Å—Ç–µ–Ω–∏–µ '{plant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ"
    
    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ
    ctx.context.remove_from_cart(plant_name)
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    ctx.context.change_state(DialogState.CART_MANAGEMENT)
    
    return f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ '{plant_name}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"

agent = Agent[ChatContext](
    name="TropicHouseAgent",
    instructions=_make_instructions,
    model="gpt-4.1-mini",
    tools=[search, order, preorder, suggest_accessories, add_to_cart, show_cart, checkout_cart, remove_from_cart],
    model_settings=ModelSettings(tool_choice="auto"),
)

async def extract_pot_size(text: str) -> int | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–∞—à–ø–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç–µ
    patterns = [
        r'(\d+)\s*—Å–º',      # "20 —Å–º", "15—Å–º"
        r'd(\d+)',          # "d15", "d20"
        r'–¥–∏–∞–º–µ—Ç—Ä\s*(\d+)', # "–¥–∏–∞–º–µ—Ç—Ä 20"
        r'—Ä–∞–∑–º–µ—Ä\s*(\d+)',  # "—Ä–∞–∑–º–µ—Ä 15"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text.lower())
        if match:
            size = int(match.group(1))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è –∫–∞—à–ø–æ (10-70 —Å–º)
            if 10 <= size <= 70:
                return size
    
    return None

async def extract_plant_quantity(text: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    system_prompt = """
–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Ñ–∏—Å.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –æ–¥–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ ‚Üí –≤–µ—Ä–Ω–∏ 1
- –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—Ç–µ–Ω–∏–π, –æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –æ—Ñ–∏—Å–∞, –º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏–π ‚Üí –≤–µ—Ä–Ω–∏ 2 –∏–ª–∏ –±–æ–ª—å—à–µ
- –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ñ–∏—Å–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Üí –≤–µ—Ä–Ω–∏ 1

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –ß–ò–°–õ–û (1, 2, 3 –∏ —Ç.–¥.) –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": text},
    ]
    try:
        response = await client.chat.completions.create(model="gpt-4.1-mini", messages=messages)
        quantity_str = response.choices[0].message.content.strip()
        return int(quantity_str)
    except:
        return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1

async def is_working_hours_and_managers_available(category: str) -> tuple[bool, bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    
    Returns:
        tuple: (is_working_hours, has_online_managers)
    """
    now = datetime.now()
    current_hour = now.hour
    
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –¥–æ 19:00
    is_working_hours = current_hour < 19
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Ö –≤—ã–∑–æ–≤
    has_online_managers = False
    if category in ["office_plant", "multiple_plants", "live_photo", "ask_human", "reclamation", "order_question", "call_request"]:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        is_b2b = category == "office_plant"
        manager_group = config.MANAGER_B2B if is_b2b else config.MANAGER_B2C
        
        try:
            online_managers = telegrambot.get_online_managers(manager_group["id"])
            has_online_managers = len(online_managers) > 0
        except Exception as e:
            logger.error(f"[is_working_hours_and_managers_available] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
            has_online_managers = False
    
    return is_working_hours, has_online_managers

async def run_unified_agent(context: ChatContext, user_message: str, openai_client=None) -> str:
    """
        Main function to run the bot agent.
        """
    # ... (–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è intent) ...
    intent = await classify_intent(text=text, context=context)

    # –ï—Å–ª–∏ –∏–Ω—Ç–µ–Ω—Ç "review_ignore", –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    if intent == "review_ignore":
        return ""

    """–û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Agents SDK Runner —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.add_message(role="user", text=user_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–Ω–µ–µ
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    if context.state == DialogState.MANAGER_CALLED and not user_message.strip().lower() in ["/start"]:
        # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"[run_unified_agent] –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤—ã–∑–≤–∞–Ω –¥–ª—è chat {context.chat_id}, –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    category = await classify_intent(context, user_message)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è office_plant: –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ > 1
    if category == "office_plant":
        quantity = await extract_plant_quantity(user_message)
        if quantity <= 1:
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
            category = "none"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –∫–∞—à–ø–æ - –æ—Ç–≤–µ—á–∞–µ–º —Å—Å—ã–ª–∫–æ–π
    if category == "pot_request":
        pot_size = await extract_pot_size(user_message)
        if pot_size:
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—à–ø–æ
            pot_link = generate_pot_link(pot_size)
            response = f"ü™¥ –í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—à–ø–æ –¥–∏–∞–º–µ—Ç—Ä–æ–º {pot_size} —Å–º:\n{pot_link}"
        else:
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—à–ø–æ
            response = "ü™¥ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—à–ø–æ –∏ –≥–æ—Ä—à–∫–æ–≤:\nhttps://tropichouse.ru/catalog/gorshki_i_kashpo/"
        
        context.add_message(role="assistant", text=response)
        return response
    
    if category != "none":
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É –∏ –ø—Ä–æ—Å—å–± –ø–æ–∑–≤–æ–Ω–∏—Ç—å - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ MANAGER_CALLED –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        if category in ["order_question", "call_request"]:
            details = f"{DETAILS_PREFIX[category]}: {user_message}"
            context.subject = DETAILS_PREFIX[category]
            await telegrambot.notify_seller(details, is_preorder=False, context=context)
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MANAGER_CALLED –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            context.change_state(DialogState.MANAGER_CALLED)
            return ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        is_working_hours, has_online_managers = await is_working_hours_and_managers_available(category)
        
        # –ï—Å–ª–∏ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω
        if not is_working_hours and not has_online_managers:
            after_hours_message = "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è ‚è∞"
            context.add_message(role="assistant", text=after_hours_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            details = f"{DETAILS_PREFIX[category]}: {user_message}"
            context.subject = DETAILS_PREFIX[category]
            await telegrambot.notify_seller(details, is_preorder=False, context=context)
            
            return after_hours_message
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        details = f"{DETAILS_PREFIX[category]}: {user_message}"
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ notify_seller
        context.subject = DETAILS_PREFIX[category]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await telegrambot.notify_seller(details, is_preorder=False, context=context)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        reply = CATEGORY_REPLIES[category]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.add_message(role="assistant", text=reply)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–∑–≤–∞–Ω
        context.change_state(DialogState.MANAGER_CALLED)
        return reply
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    history = context.get_last_n_messages(20)
    messages = [{"role":"system", "content": _make_instructions(context, agent)}] + history
    result = await Runner.run(agent, messages, context=context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—à–ª–∏ –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UPSELL –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    if context.state == DialogState.UPSELL:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        await send_accessories_message(context.chat_id)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.change_state(DialogState.COMPLETED)
        return ""  # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if result.final_output is not None:
        context.add_message(role="assistant", text=result.final_output)
    return result.final_output

async def send_accessories_message(chat_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
    from main import send_message
    
    message = """üåø –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! 

–ê —á—Ç–æ–±—ã –≤–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–æ —Å–µ–±—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–ª–µ–∑–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã:

üöø **–õ–µ–π–∫–∏ –∏ –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏**
https://tropichouse.ru/catalog/aksessuary/leyki_i_opryskivateli/

üå± **–£–¥–æ–±—Ä–µ–Ω–∏—è** 
https://tropichouse.ru/catalog/udobreniya/udobreniya_1/

üí° **–§–∏—Ç–æ–ª–∞–º–ø—ã**
https://tropichouse.ru/catalog/aksessuary/fitolampy/

üîß **–ü—Ä–∏–±–æ—Ä—ã –¥–ª—è —É—Ö–æ–¥–∞**
https://tropichouse.ru/catalog/aksessuary/pribory_dlya_rasteniy/

–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä"""
    
    await send_message(chat_id, message)
