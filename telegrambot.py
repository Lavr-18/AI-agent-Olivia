from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatMemberStatus
import config
import logging
import requests
from datetime import datetime
import json
import time
import asyncio

logger = logging.getLogger(__name__)

try:
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    logger.info("–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç: {e}")


# SELLER_CHAT_ID = -1002540034535 # –≠—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config

def api_request(method, endpoint, params=None, json_data=None, headers=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    try:
        base_url = config.MG_URL if endpoint.startswith("/users") else config.API_URL
        url = f"{base_url}{endpoint}"

        if not headers:
            headers = {"X-Bot-Token": config.MG_TOKEN if endpoint.startswith("/users") else config.RETAIL_CRM_BOT_TOKEN}

        if method == "GET":
            resp = requests.get(url, params=params, headers=headers, timeout=5)
        elif method == "POST":
            resp = requests.post(url, json=json_data, headers=headers, timeout=5)
        elif method == "PATCH":
            resp = requests.patch(url, json=json_data, headers=headers, timeout=5)
        else:
            return None, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"

        if resp.status_code in [200, 201, 204]:
            return resp.json() if resp.content else {}, None

        error = f"HTTP {resp.status_code}: {resp.text}"
        logger.error(f"[api_request] {error}")
        return None, error

    except Exception as e:
        logger.error(f"[api_request] –û—à–∏–±–∫–∞: {e}")
        return None, str(e)


def get_online_managers(group):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    params = {"group": group, "online": 1, "active": 1, "limit": 50}
    data, error = api_request("GET", "/users", params=params)

    if error:
        return []

    if isinstance(data, dict):
        return data.get('users', []) or []
    return data if isinstance(data, list) else []


def choose_manager(managers):
    """–í—ã–±–∏—Ä–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    return min(managers, key=lambda u: u.get("activeDialogs", 0)) if managers else None


def assign_dialog_to_manager(dialog_id, user_id):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥ MessageGateway‚Äë–±–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    headers = {
        "X-Bot-Token": config.RETAIL_CRM_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {"user_id": int(user_id)}

    data, error = api_request("PATCH", f"/dialogs/{dialog_id}/assign", json_data=payload, headers=headers)

    if not error:
        logger.info(f"[assign_dialog_to_manager] –î–∏–∞–ª–æ–≥ {dialog_id} ‚Üí –º–µ–Ω–µ–¥–∂–µ—Ä {user_id}")
        return True
    return False


def get_dialog_by_id(dialog_id, debug=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ –µ–≥–æ ID - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    dialog_id_str = str(dialog_id)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ ID (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    logger.info(f"[get_dialog_by_id] –ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–∞ {dialog_id}")
    data, error = api_request("GET", f"/dialogs/{dialog_id}")

    if not error and data:
        logger.info(f"[get_dialog_by_id] –î–∏–∞–ª–æ–≥ {dialog_id} –Ω–∞–π–¥–µ–Ω –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return data

    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º id
    data, error = api_request("GET", "/dialogs", params={"id": dialog_id})

    if not error and data:
        # API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        if isinstance(data, list) and data:
            logger.info(f"[get_dialog_by_id] –î–∏–∞–ª–æ–≥ {dialog_id} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä id (—Å–ø–∏—Å–æ–∫)")
            return data[0]
        elif isinstance(data, dict):
            logger.info(f"[get_dialog_by_id] –î–∏–∞–ª–æ–≥ {dialog_id} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä id (–æ–±—ä–µ–∫—Ç)")
            return data

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    logger.info(f"[get_dialog_by_id] –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id}")

    page = 1
    limit = 100
    max_pages = 5  # –£–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

    while page <= max_pages:
        data, error = api_request("GET", "/dialogs", params={"limit": limit, "page": page})

        if error:
            logger.error(f"[get_dialog_by_id] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ (—Å—Ç—Ä. {page}): {error}")
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        dialogs = []
        if isinstance(data, dict):
            dialogs = data.get('dialogs', []) or []
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            pagination = data.get('pagination', {})
            if pagination.get('currentPage') == pagination.get('totalPageCount'):
                page = max_pages  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        elif isinstance(data, list):
            dialogs = data
            if len(dialogs) < limit:
                page = max_pages  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

        # –ò—â–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ chat_id
        for dialog in dialogs:
            if str(dialog.get('chat_id')) == dialog_id_str:
                logger.info(f"[get_dialog_by_id] –î–∏–∞–ª–æ–≥ {dialog_id} –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                return dialog

        if not dialogs:
            break

        page += 1
        time.sleep(0.1)  # –£–º–µ–Ω—å—à–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É

    logger.warning(f"[get_dialog_by_id] –î–∏–∞–ª–æ–≥ {dialog_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


def get_context_info(context):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if context is None:
        logger.warning("[get_context_info] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        return {
            "chat_id": None,
            "subject": "",
            "channel_info": {},
            "user_info": {},
            "selected_plants": [],
            "out_of_stock_plant": {},
            "preorder_info": {},
            "order_details": {},
            "dialog_id": None
        }

    chat_id = getattr(context, "chat_id", None)
    dialog_id = getattr(context, "dialog_id", None)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ ID
    if chat_id:
        logger.info(f"[get_context_info] –ü–æ–ª—É—á–µ–Ω chat_id: {chat_id}")
    else:
        logger.warning("[get_context_info] chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")

    if dialog_id:
        logger.info(f"[get_context_info] –ü–æ–ª—É—á–µ–Ω dialog_id: {dialog_id}")
    else:
        logger.debug("[get_context_info] dialog_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")

    result = {
        "chat_id": chat_id,
        "dialog_id": dialog_id,
        "subject": getattr(context, "subject", ""),
        "channel_info": getattr(context, "channel_info", {}),
        "user_info": getattr(context, "user_info", {}),
        "selected_plants": getattr(context, "selected_plants", []),
        "out_of_stock_plant": getattr(context, "out_of_stock_plant", {}),
        "preorder_info": getattr(context, "preorder_info", {}),
        "order_details": getattr(context, "order_details", {})
    }
    return result


def is_b2b_order(context_info, order_details):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º (B2B)"""
    if "–æ—Ñ–∏—Å" in context_info["subject"].lower() or "b2b" in context_info["subject"].lower():
        return True
    if "—Ü–≤–µ—Ç—ã –≤ –æ—Ñ–∏—Å" in order_details.lower() or "—Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Å–∞" in order_details.lower():
        return True
    return False


def format_seller_message(context_info, order_details, is_preorder, is_b2b, assignment_result=None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    if is_preorder:
        message = "üîî <b>–ù–æ–≤—ã–π –ü–†–ï–î–ó–ê–ö–ê–ó!</b>\n\n"
    elif context_info["subject"]:
        message = "üîî <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞!</b>\n\n"
    else:
        message = "üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"

    if context_info["subject"]:
        message += f"<b>–¢–µ–º–∞:</b> {context_info['subject']}\n\n"

    message += f"<b>–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞:</b> {'B2B' if is_b2b else 'B2C'}\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    if context_info["chat_id"]:
        message += f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
        message += f"‚Ä¢ ID —á–∞—Ç–∞: <code>{context_info['chat_id']}</code>\n"

        if context_info["channel_info"]:
            channel_name = context_info["channel_info"].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            channel_id = context_info["channel_info"].get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID')
            message += f"‚Ä¢ –ö–∞–Ω–∞–ª: {channel_name} (ID: {channel_id})\n"

        if context_info["user_info"]:
            user_name = context_info["user_info"].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            user_id = context_info["user_info"].get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID')
            message += f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {user_name} (ID: {user_id})\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if not is_preorder and context_info["selected_plants"]:
            message += f"‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: {len(context_info['selected_plants'])} —à—Ç.\n"
            for i, plant in enumerate(context_info["selected_plants"], 1):
                plant_name = plant.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
                message += f"  {i}. {plant_name}\n"

    # –î–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if is_preorder:
        message += f"\n<b>–ü–†–ï–î–ó–ê–ö–ê–ó (–ø–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 7-10 –¥–Ω–µ–π):</b>\n"

        if context_info["out_of_stock_plant"]:
            plant = context_info["out_of_stock_plant"]
            message += f"‚Ä¢ –†–∞—Å—Ç–µ–Ω–∏–µ: {plant.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ')}\n"
            if '–¶–µ–Ω–∞' in plant:
                message += f"‚Ä¢ –¶–µ–Ω–∞: {plant['–¶–µ–Ω–∞']}\n"
            if '–°—Å—ã–ª–∫–∞' in plant and plant['–°—Å—ã–ª–∫–∞']:
                message += f"‚Ä¢ –°—Å—ã–ª–∫–∞: {plant['–°—Å—ã–ª–∫–∞']}\n"

        if context_info["preorder_info"]:
            for key, value in context_info["preorder_info"].items():
                if key not in ('is_preorder', 'plant_name'):
                    message += f"‚Ä¢ {key}: {value}\n"

    # –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    if context_info["order_details"]:
        message += f"\n<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
        for key, value in context_info["order_details"].items():
            message += f"‚Ä¢ {key}: {value}\n"

    # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if assignment_result:
        message += f"\n<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:</b>\n‚Ä¢ {assignment_result['message']}\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{order_details}"

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message += f"\n\n<i>–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω: {current_time}</i>"

    return message


def handle_manager_assignment(is_b2b=False, target_dialog_id=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É

    Args:
        is_b2b: True –¥–ª—è B2B –∑–∞–ø—Ä–æ—Å–∞, False –¥–ª—è B2C
        target_dialog_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª –±–æ—Ç–∞
    """
    try:
        logger.info(
            f"[handle_manager_assignment] –í—ã–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: is_b2b={is_b2b}, target_dialog_id={target_dialog_id}")

        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not target_dialog_id:
            logger.error("[handle_manager_assignment] –ù–µ —É–∫–∞–∑–∞–Ω ID –¥–∏–∞–ª–æ–≥–∞")
            return {"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω ID –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        dialog = get_dialog_by_id(target_dialog_id)
        if not dialog:
            logger.warning(f"[handle_manager_assignment] –î–∏–∞–ª–æ–≥ {target_dialog_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"status": "error", "message": f"–î–∏–∞–ª–æ–≥ {target_dialog_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if isinstance(dialog, dict) and dialog.get("responsible", {}).get("type") == "user":
            logger.warning(f"[handle_manager_assignment] –î–∏–∞–ª–æ–≥ {target_dialog_id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É")
            return {"status": "warning", "message": "–î–∏–∞–ª–æ–≥ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É"}

        # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        manager_group = config.MANAGER_B2B if is_b2b else config.MANAGER_B2C
        managers = get_online_managers(manager_group["id"])

        if not managers:
            return {
                "status": "warning",
                "message": f"–ù–µ—Ç –æ–Ω–ª–∞–π–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã {manager_group['group']}. –î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏."
            }

        target_manager = choose_manager(managers)

        if assign_dialog_to_manager(dialog['id'], target_manager["id"]):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ first_name –∏ last_name
            manager_name = f"{target_manager.get('first_name', '')} {target_manager.get('last_name', '')}"
            if not manager_name.strip():  # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                manager_name = target_manager.get('fullName', 'Unknown')

            return {
                "status": "success",
                "message": f"–î–∏–∞–ª–æ–≥ {target_dialog_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name} –≥—Ä—É–ø–ø—ã {manager_group['group']}"
            }
        else:
            return {
                "status": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ {target_dialog_id} –º–µ–Ω–µ–¥–∂–µ—Ä—É"
            }

    except Exception as e:
        logger.error(f"[handle_manager_assignment] –û—à–∏–±–∫–∞: {e}")
        return {"status": "error", "message": str(e)}


async def notify_seller(order_details: str, is_preorder: bool, context=None) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É —á–µ—Ä–µ–∑ Telegram"""
    try:
        logger.info(f"[notify_seller] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü—É (is_preorder={is_preorder})")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_info = get_context_info(context)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (B2B/B2C)
        is_b2b = is_b2b_order(context_info, order_details)

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å dialog_id
        assignment_result = None
        target_dialog_id = context_info.get("dialog_id")

        if target_dialog_id:
            logger.info(f"[notify_seller] –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥ {target_dialog_id}")
            assignment_result = handle_manager_assignment(is_b2b, target_dialog_id)
            logger.info(f"[notify_seller] –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {assignment_result}")
        else:
            logger.warning("[notify_seller] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç dialog_id, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            assignment_result = {"status": "warning", "message": "–ù–µ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        message = format_seller_message(context_info, order_details, is_preorder, is_b2b, assignment_result)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if target_dialog_id:
            message = message.replace("‚Ä¢ ID —á–∞—Ç–∞:", f"‚Ä¢ ID –¥–∏–∞–ª–æ–≥–∞: <code>{target_dialog_id}</code>\n‚Ä¢ ID —á–∞—Ç–∞:")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=config.TELEGRAM_CHAT_ID,
            text=message,
            parse_mode="HTML",
            message_thread_id=config.TELEGRAM_TOPIC_ID
        )

        logger.info(f"[notify_seller] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É (chat_id: {config.TELEGRAM_CHAT_ID})")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        if is_preorder:
            confirmation_message = "–£—Ä–∞! –í–∞—à –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ –†–∞—Å—Ç–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 7-10 –¥–Ω–µ–π. –Ø –ª–∏—á–Ω–æ –ø—Ä–æ—Å–ª–µ–∂—É, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üíö"
        else:
            confirmation_message = "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ –Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∏ —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞! üíö"

        return {"status": "success", "confirmation_message": confirmation_message}

    except Exception as e:
        logger.error(f"[notify_seller] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
        error_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. üò• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é."
        return {"status": "error", "error_message": error_message}


# --- –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å ---
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""

    test_message = "üöÄ **–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞!**\n\n"
    test_message += "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ç–µ–º–æ–π.\n"
    test_message += "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚ú®"

    try:
        print(
            f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {config.TELEGRAM_CHAT_ID}, —Ç–µ–º—É {config.TELEGRAM_TOPIC_ID}...")
        await bot.send_message(
            chat_id=config.TELEGRAM_CHAT_ID,
            message_thread_id=config.TELEGRAM_TOPIC_ID,
            text=test_message,
            parse_mode=ParseMode.HTML
        )
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

